{
    "openapi": "3.0.0",
    "info": {
        "title": "Advanced Task Management API",
        "description": "Comprehensive API documentation for the Advanced Task Management System. This API provides endpoints for managing tasks, users, and administrative functions with proper authentication and authorization.",
        "contact": {
            "name": "API Support Team",
            "email": "support@taskmanagement.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost",
            "description": "Main API Server"
        }
    ],
    "paths": {
        "/api/v1/tasks": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Get all tasks",
                "description": "Retrieve a paginated list of tasks assigned to the authenticated user",
                "operationId": "getTasks",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number for pagination",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 15
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by task status",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "enum": [
                                0,
                                1,
                                2,
                                3
                            ]
                        }
                    },
                    {
                        "name": "priority",
                        "in": "query",
                        "description": "Filter by task priority",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "enum": [
                                0,
                                1,
                                2,
                                3
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tasks retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Task"
                                            }
                                        },
                                        "meta": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "last_page": {
                                                    "type": "integer",
                                                    "example": 5
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "example": 15
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 75
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Create a new task",
                "description": "Create a new task with the provided details. Rate limited to prevent spam.",
                "operationId": "createTask",
                "requestBody": {
                    "description": "Task data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTaskRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Task created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Task created successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Task creation failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Task creation failed"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests - rate limit exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Too many attempts. Please try again later."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/tasks/{id}": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Get a specific task",
                "description": "Retrieve details of a specific task by ID. Only accessible to users who can view the task.",
                "operationId": "getTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Task"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Update a task",
                "description": "Update an existing task with new details. Only authorized users can update tasks.",
                "operationId": "updateTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "Updated task data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTaskRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Task updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Task updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Not authorized to update this task",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Not authorized to update this task"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Delete a task (soft delete)",
                "description": "Soft delete a task. The task will be moved to trash and can be restored later.",
                "operationId": "deleteTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Task deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Deletion failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Task deletion failed"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/tasks/{id}/status": {
            "patch": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Update task status",
                "description": "Update the status of a specific task. Can be used to mark tasks as pending, in progress, completed, or overdue.",
                "operationId": "updateTaskStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "Task status update data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTaskStatusRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Task status updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Task updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Status update failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Not authorized to update this task"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/tasks/trashed": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Get trashed tasks",
                "description": "Retrieve a list of soft-deleted tasks that can be restored.",
                "operationId": "getTrashedTasks",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number for pagination",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trashed tasks retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Task"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/tasks/force-delete/{id}": {
            "delete": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Permanently delete a task",
                "description": "Permanently delete a task from the database. This action cannot be undone.",
                "operationId": "forceDeleteTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task permanently deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Task permanently deleted"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Permanent deletion failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Task permanent deletion failed"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/tasks/restore/{id}": {
            "post": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Restore a trashed task",
                "description": "Restore a soft-deleted task back to active status.",
                "operationId": "restoreTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task restored successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Task restored successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Restore failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Task restore failed"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/auth/forgot-password": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Forgot password",
                "description": "Send OTP code to user email for password reset. User will receive a verification code via email.",
                "operationId": "forgotPassword",
                "requestBody": {
                    "description": "Forgot password request data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ForgotPasswordRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OTP code sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForgotPasswordResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": []
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/forgot-password/resend-otp-code": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Resend OTP code",
                "description": "Resend OTP code for password reset if the previous one expired or was not received",
                "operationId": "resendOtpCode",
                "requestBody": {
                    "description": "Resend code request data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResendCodeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "OTP code resent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResendCodeResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Cannot resend OTP code at this time",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Cannot resend verification OTP code"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": []
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": []
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "description": "Authenticate user with email and password. Returns JWT token and user information. Also handles email verification flow.",
                "operationId": "loginUser",
                "requestBody": {
                    "description": "Login credentials",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Login successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoginResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Account inactive or blocked",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Your account is inactive or blocked"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": []
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid email or password"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": []
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/refresh-token": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh JWT token",
                "description": "Refresh the JWT token to extend session. Requires valid JWT token in Authorization header.",
                "operationId": "refreshToken",
                "responses": {
                    "201": {
                        "description": "Token refreshed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RefreshTokenResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Token is invalid or expired",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "User logout",
                "description": "Logout the currently authenticated user and invalidate their JWT token",
                "operationId": "logoutUser",
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LogoutResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/auth/register": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "User registration",
                "description": "Register a new user account. Automatically sends email verification code after successful registration.",
                "operationId": "registerUser",
                "requestBody": {
                    "description": "Registration data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegisterRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Registration successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegisterResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/me": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Get current user profile",
                "description": "Retrieve the profile information of the currently authenticated user",
                "operationId": "getCurrentUser",
                "responses": {
                    "200": {
                        "description": "User profile retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserProfileResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or expired token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/auth/reset-password": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Reset password",
                "description": "Reset user password using OTP code received via email. The OTP code must be valid and not expired.",
                "operationId": "resetPassword",
                "requestBody": {
                    "description": "Reset password request data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResetPasswordRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResetPasswordResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid OTP code or reset failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid OTP code"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": []
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": []
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/verify-otp": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify OTP code",
                "description": "Verify OTP code for password reset. This endpoint validates the OTP code without resetting the password.",
                "operationId": "verifyOtpCode",
                "requestBody": {
                    "description": "OTP verification request data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VerifyOtpRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Valid OTP code",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VerifyOtpResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid OTP code",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid OTP code"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": []
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/email/resend": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Resend email verification code",
                "description": "Resend email verification OTP code to the authenticated user. Rate limited to 6 attempts per minute.",
                "operationId": "resendVerificationCode",
                "responses": {
                    "201": {
                        "description": "Verification code resent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResendVerificationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Already verified, code already sent, or cannot resend",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "properties": {
                                                "success": {
                                                    "type": "boolean",
                                                    "example": false
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Email already verified"
                                                },
                                                "errors": {
                                                    "type": "object",
                                                    "example": []
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "success": {
                                                    "type": "boolean",
                                                    "example": false
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Verification code already sent"
                                                },
                                                "errors": {
                                                    "type": "object",
                                                    "example": []
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests - Rate limit exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/auth/email/verify": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify email address",
                "description": "Verify the authenticated user's email address using OTP code. Rate limited to 6 attempts per minute.",
                "operationId": "verifyEmail",
                "requestBody": {
                    "description": "Email verification request data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VerificationCodeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Email verified successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VerificationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Already verified, invalid OTP, or verification failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "properties": {
                                                "success": {
                                                    "type": "boolean",
                                                    "example": false
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Email already verified"
                                                },
                                                "errors": {
                                                    "type": "object",
                                                    "example": []
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "success": {
                                                    "type": "boolean",
                                                    "example": false
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Invalid OTP code"
                                                },
                                                "errors": {
                                                    "type": "object",
                                                    "example": []
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests - Rate limit exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/user/v1/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "description": "Retrieve a paginated list of all active users. Authentication is optional but affects pagination.",
                "operationId": "getAllUsers",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number for pagination",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserCollection"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/user/v1/users/recommended": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get recommended users",
                "description": "Retrieve a list of recommended users based on the platform's algorithm",
                "operationId": "getRecommendedUsers",
                "responses": {
                    "200": {
                        "description": "Recommended users retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Data retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/user/v1/profile": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get current user profile",
                "description": "Retrieve the authenticated user's profile information",
                "operationId": "getCurrentUserProfile",
                "responses": {
                    "200": {
                        "description": "User profile retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/user/v1/users/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "description": "Retrieve a specific user's profile information by their ID",
                "operationId": "getUserById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/user/v1/users/slug/{slug}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get user by slug",
                "description": "Retrieve a specific user's profile information by their unique slug",
                "operationId": "getUserBySlug",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "User unique slug",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "john-doe"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/user/v1/change-password": {
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Change password",
                "description": "Change the authenticated user's password. Requires current password verification.",
                "operationId": "changeUserPassword",
                "requestBody": {
                    "description": "Password change request data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChangePasswordRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Password change failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error or incorrect current password",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Current password is incorrect"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": []
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "ForgotPasswordRequest": {
                "required": [
                    "email"
                ],
                "properties": {
                    "email": {
                        "description": "User email address",
                        "type": "string",
                        "format": "email",
                        "example": "user@example.com"
                    }
                },
                "type": "object"
            },
            "ForgotPasswordResponse": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "message": {
                        "type": "string",
                        "example": "OTP code sent to your email successfully"
                    },
                    "data": {
                        "type": "object",
                        "example": []
                    }
                },
                "type": "object"
            },
            "ResendCodeRequest": {
                "required": [
                    "email"
                ],
                "properties": {
                    "email": {
                        "description": "User email address",
                        "type": "string",
                        "format": "email",
                        "example": "user@example.com"
                    }
                },
                "type": "object"
            },
            "ResendCodeResponse": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "message": {
                        "type": "string",
                        "example": "OTP code resent successfully"
                    },
                    "data": {
                        "type": "object",
                        "example": []
                    }
                },
                "type": "object"
            },
            "LoginRequest": {
                "required": [
                    "email",
                    "password"
                ],
                "properties": {
                    "email": {
                        "description": "User email address",
                        "type": "string",
                        "format": "email",
                        "example": "user@example.com"
                    },
                    "password": {
                        "description": "User password",
                        "type": "string",
                        "format": "password",
                        "example": "password123"
                    },
                    "remember_me": {
                        "description": "Remember user login",
                        "type": "boolean",
                        "example": true
                    }
                },
                "type": "object"
            },
            "LoginResponse": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "message": {
                        "type": "string",
                        "example": "Logged in successfully"
                    },
                    "data": {
                        "properties": {
                            "user": {
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "example": "user@example.com"
                                    },
                                    "email_verified_at": {
                                        "type": "string",
                                        "format": "date-time",
                                        "nullable": true
                                    },
                                    "created_at": {
                                        "type": "string",
                                        "format": "date-time"
                                    },
                                    "updated_at": {
                                        "type": "string",
                                        "format": "date-time"
                                    }
                                },
                                "type": "object"
                            },
                            "token": {
                                "description": "JWT access token",
                                "type": "string",
                                "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                            },
                            "expires_in_minutes": {
                                "description": "Token expiration time in minutes",
                                "type": "integer",
                                "example": 60
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "RefreshTokenResponse": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "data": {
                        "properties": {
                            "access_token": {
                                "description": "New JWT access token",
                                "type": "string",
                                "example": "eyJ0eXAiOiJKV1QiLCJhbGd..."
                            },
                            "expires_in_minutes": {
                                "description": "Token expiration time in minutes",
                                "type": "integer",
                                "example": 60
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "LogoutResponse": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "message": {
                        "type": "string",
                        "example": "Logged out successfully"
                    },
                    "data": {
                        "type": "object",
                        "example": null,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "RegisterRequest": {
                "required": [
                    "first_name",
                    "last_name",
                    "email",
                    "password",
                    "password_confirmation"
                ],
                "properties": {
                    "first_name": {
                        "description": "User's first name",
                        "type": "string",
                        "example": "John"
                    },
                    "last_name": {
                        "description": "User's last name",
                        "type": "string",
                        "example": "Doe"
                    },
                    "email": {
                        "description": "User email address",
                        "type": "string",
                        "format": "email",
                        "example": "john.doe@example.com"
                    },
                    "password": {
                        "description": "User password (min 8 characters)",
                        "type": "string",
                        "format": "password",
                        "example": "password123"
                    },
                    "password_confirmation": {
                        "description": "Password confirmation",
                        "type": "string",
                        "format": "password",
                        "example": "password123"
                    },
                    "phone": {
                        "description": "User phone number",
                        "type": "string",
                        "example": "+1234567890"
                    }
                },
                "type": "object"
            },
            "RegisterResponse": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "message": {
                        "type": "string",
                        "example": "Registration successful. Verification code sent to your email."
                    },
                    "data": {
                        "properties": {
                            "user": {
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "first_name": {
                                        "type": "string",
                                        "example": "John"
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "example": "Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "example": "john.doe@example.com"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "example": "+1234567890",
                                        "nullable": true
                                    },
                                    "verified_at": {
                                        "type": "string",
                                        "format": "date-time",
                                        "nullable": true
                                    },
                                    "created_at": {
                                        "type": "string",
                                        "format": "date-time"
                                    },
                                    "updated_at": {
                                        "type": "string",
                                        "format": "date-time"
                                    }
                                },
                                "type": "object"
                            },
                            "token": {
                                "description": "JWT access token",
                                "type": "string",
                                "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                            },
                            "expires_in_minutes": {
                                "description": "Token expiration time in minutes",
                                "type": "integer",
                                "example": 60
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "UserProfileResponse": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "message": {
                        "type": "string",
                        "example": "User profile retrieved successfully"
                    },
                    "data": {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 1
                            },
                            "first_name": {
                                "type": "string",
                                "example": "John"
                            },
                            "last_name": {
                                "type": "string",
                                "example": "Doe"
                            },
                            "email": {
                                "type": "string",
                                "example": "john.doe@example.com"
                            },
                            "phone": {
                                "type": "string",
                                "example": "+1234567890",
                                "nullable": true
                            },
                            "verified_at": {
                                "type": "string",
                                "format": "date-time",
                                "nullable": true
                            },
                            "status": {
                                "description": "Account status",
                                "type": "boolean",
                                "example": true
                            },
                            "created_at": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "updated_at": {
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "ResetPasswordRequest": {
                "required": [
                    "email",
                    "password",
                    "password_confirmation",
                    "code"
                ],
                "properties": {
                    "email": {
                        "description": "User email address",
                        "type": "string",
                        "format": "email",
                        "example": "user@example.com"
                    },
                    "password": {
                        "description": "New password",
                        "type": "string",
                        "minLength": 8,
                        "example": "newpassword123"
                    },
                    "password_confirmation": {
                        "description": "Password confirmation",
                        "type": "string",
                        "example": "newpassword123"
                    },
                    "code": {
                        "description": "OTP verification code",
                        "type": "string",
                        "example": "123456"
                    }
                },
                "type": "object"
            },
            "ResetPasswordResponse": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "message": {
                        "type": "string",
                        "example": "Password reset successfully"
                    },
                    "data": {
                        "type": "object",
                        "example": []
                    }
                },
                "type": "object"
            },
            "VerifyOtpRequest": {
                "required": [
                    "email",
                    "code"
                ],
                "properties": {
                    "email": {
                        "description": "User email address",
                        "type": "string",
                        "format": "email",
                        "example": "user@example.com"
                    },
                    "code": {
                        "description": "OTP verification code",
                        "type": "string",
                        "example": "123456"
                    }
                },
                "type": "object"
            },
            "VerifyOtpResponse": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "message": {
                        "type": "string",
                        "example": "Valid OTP code"
                    },
                    "data": {
                        "type": "object",
                        "example": []
                    }
                },
                "type": "object"
            },
            "VerificationCodeRequest": {
                "required": [
                    "code"
                ],
                "properties": {
                    "code": {
                        "description": "Email verification code",
                        "type": "string",
                        "example": "123456"
                    }
                },
                "type": "object"
            },
            "VerificationResponse": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "message": {
                        "type": "string",
                        "example": "Email verified successfully"
                    },
                    "data": {
                        "type": "object",
                        "example": []
                    }
                },
                "type": "object"
            },
            "ResendVerificationResponse": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "message": {
                        "type": "string",
                        "example": "Verification code resent successfully"
                    },
                    "data": {
                        "type": "object",
                        "example": []
                    }
                },
                "type": "object"
            },
            "User": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "John Doe"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "john@example.com"
                    },
                    "phone": {
                        "type": "string",
                        "example": "+1234567890"
                    },
                    "phone_code": {
                        "type": "string",
                        "example": "+1"
                    },
                    "slug": {
                        "type": "string",
                        "example": "john-doe"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "nomad",
                            "citizen"
                        ],
                        "example": "citizen"
                    },
                    "image": {
                        "type": "string",
                        "example": "https://example.com/image.jpg",
                        "nullable": true
                    },
                    "verified_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "UserResource": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "message": {
                        "type": "string",
                        "example": "Data retrieved successfully"
                    },
                    "data": {
                        "$ref": "#/components/schemas/User"
                    }
                },
                "type": "object"
            },
            "UserCollection": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "message": {
                        "type": "string",
                        "example": "Data retrieved successfully"
                    },
                    "data": {
                        "properties": {
                            "data": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/User"
                                }
                            },
                            "current_page": {
                                "type": "integer",
                                "example": 1
                            },
                            "per_page": {
                                "type": "integer",
                                "example": 15
                            },
                            "total": {
                                "type": "integer",
                                "example": 100
                            },
                            "last_page": {
                                "type": "integer",
                                "example": 7
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "UpdateUserRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "John Doe"
                    },
                    "country_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "city_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "nationality_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "phone": {
                        "type": "string",
                        "example": "1234567890"
                    },
                    "phone_code": {
                        "type": "string",
                        "example": "+1"
                    },
                    "image": {
                        "type": "string",
                        "format": "binary",
                        "nullable": true
                    },
                    "gender": {
                        "type": "string",
                        "enum": [
                            "male",
                            "female"
                        ],
                        "example": "male"
                    },
                    "birth_date": {
                        "type": "string",
                        "format": "date",
                        "example": "1990-01-01"
                    }
                },
                "type": "object"
            },
            "SetFcmTokenRequest": {
                "required": [
                    "token"
                ],
                "properties": {
                    "token": {
                        "description": "Firebase Cloud Messaging token",
                        "type": "string",
                        "example": "fcm_token_here"
                    }
                },
                "type": "object"
            },
            "ChangePasswordRequest": {
                "required": [
                    "current_password",
                    "new_password",
                    "new_password_confirmation"
                ],
                "properties": {
                    "current_password": {
                        "description": "Current password",
                        "type": "string",
                        "example": "current_password"
                    },
                    "new_password": {
                        "description": "New password",
                        "type": "string",
                        "minLength": 8,
                        "example": "new_password123"
                    },
                    "new_password_confirmation": {
                        "description": "New password confirmation",
                        "type": "string",
                        "example": "new_password123"
                    }
                },
                "type": "object"
            },
            "MessageResponse": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "message": {
                        "type": "string",
                        "example": "Operation completed successfully"
                    },
                    "data": {
                        "type": "object",
                        "example": null,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "Task": {
                "title": "Task",
                "description": "Task model representing a task in the system",
                "required": [
                    "id",
                    "title",
                    "due_date",
                    "assignable_id",
                    "assignable_type",
                    "creator_id",
                    "creator_type",
                    "status",
                    "priority"
                ],
                "properties": {
                    "id": {
                        "description": "Task ID",
                        "type": "integer",
                        "example": 1
                    },
                    "title": {
                        "description": "Task title",
                        "type": "string",
                        "example": "Complete project documentation"
                    },
                    "description": {
                        "description": "Task description",
                        "type": "string",
                        "example": "Write comprehensive API documentation using Swagger",
                        "nullable": true
                    },
                    "due_date": {
                        "description": "Task due date",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-12-31T23:59:59Z"
                    },
                    "priority": {
                        "description": "Task priority (0=Low, 1=Medium, 2=High, 3=Critical)",
                        "type": "integer",
                        "example": 2
                    },
                    "status": {
                        "description": "Task status (0=Pending, 1=In Progress, 2=Completed, 3=Overdue)",
                        "type": "integer",
                        "example": 0
                    },
                    "assignable_id": {
                        "description": "ID of assigned user",
                        "type": "integer",
                        "example": 1
                    },
                    "assignable_type": {
                        "description": "Type of assignable entity",
                        "type": "string",
                        "example": "Modules\\\\User\\\\App\\\\Models\\\\User"
                    },
                    "creator_id": {
                        "description": "ID of task creator",
                        "type": "integer",
                        "example": 1
                    },
                    "creator_type": {
                        "description": "Type of creator entity",
                        "type": "string",
                        "example": "Modules\\\\User\\\\App\\\\Models\\\\User"
                    },
                    "updater_id": {
                        "description": "ID of last updater",
                        "type": "integer",
                        "example": 1,
                        "nullable": true
                    },
                    "updater_type": {
                        "description": "Type of updater entity",
                        "type": "string",
                        "example": "Modules\\\\User\\\\App\\\\Models\\\\User",
                        "nullable": true
                    },
                    "created_at": {
                        "description": "Creation timestamp",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-01-01T00:00:00Z"
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-01-01T00:00:00Z"
                    },
                    "deleted_at": {
                        "description": "Soft delete timestamp",
                        "type": "string",
                        "format": "date-time",
                        "example": null,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "CreateTaskRequest": {
                "title": "Create Task Request",
                "description": "Request schema for creating a new task",
                "required": [
                    "title",
                    "due_date",
                    "assignable_id"
                ],
                "properties": {
                    "title": {
                        "description": "Task title",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Complete project documentation"
                    },
                    "description": {
                        "description": "Task description",
                        "type": "string",
                        "example": "Write comprehensive API documentation using Swagger",
                        "nullable": true
                    },
                    "due_date": {
                        "description": "Task due date (must be after today)",
                        "type": "string",
                        "format": "date",
                        "example": "2024-12-31"
                    },
                    "priority": {
                        "description": "Task priority (0=Low, 1=Medium, 2=High, 3=Critical)",
                        "type": "integer",
                        "example": 2,
                        "nullable": true
                    },
                    "assignable_id": {
                        "description": "ID of user to assign task to",
                        "type": "integer",
                        "example": 1
                    }
                },
                "type": "object"
            },
            "UpdateTaskRequest": {
                "title": "Update Task Request",
                "description": "Request schema for updating an existing task",
                "properties": {
                    "title": {
                        "description": "Task title",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Updated task title"
                    },
                    "description": {
                        "description": "Task description",
                        "type": "string",
                        "example": "Updated task description",
                        "nullable": true
                    },
                    "due_date": {
                        "description": "Task due date",
                        "type": "string",
                        "format": "date",
                        "example": "2024-12-31"
                    },
                    "priority": {
                        "description": "Task priority (0=Low, 1=Medium, 2=High, 3=Critical)",
                        "type": "integer",
                        "example": 1,
                        "nullable": true
                    },
                    "assignable_id": {
                        "description": "ID of user to assign task to",
                        "type": "integer",
                        "example": 2
                    }
                },
                "type": "object"
            },
            "UpdateTaskStatusRequest": {
                "title": "Update Task Status Request",
                "description": "Request schema for updating task status",
                "required": [
                    "status"
                ],
                "properties": {
                    "status": {
                        "description": "Task status (0=Pending, 1=In Progress, 2=Completed, 3=Overdue)",
                        "type": "integer",
                        "example": 1
                    }
                },
                "type": "object"
            },
            "ApiResponse": {
                "properties": {
                    "success": {
                        "description": "Indicates if the request was successful",
                        "type": "boolean"
                    },
                    "message": {
                        "description": "Response message",
                        "type": "string"
                    },
                    "data": {
                        "description": "Response data",
                        "type": "object"
                    },
                    "errors": {
                        "description": "Validation errors or error details",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PaginatedResponse": {
                "properties": {
                    "success": {
                        "description": "Indicates if the request was successful",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Array of data items",
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "meta": {
                        "properties": {
                            "current_page": {
                                "description": "Current page number",
                                "type": "integer"
                            },
                            "last_page": {
                                "description": "Last page number",
                                "type": "integer"
                            },
                            "per_page": {
                                "description": "Items per page",
                                "type": "integer"
                            },
                            "total": {
                                "description": "Total number of items",
                                "type": "integer"
                            },
                            "from": {
                                "description": "First item number on current page",
                                "type": "integer"
                            },
                            "to": {
                                "description": "Last item number on current page",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "links": {
                        "properties": {
                            "first": {
                                "description": "URL to first page",
                                "type": "string"
                            },
                            "last": {
                                "description": "URL to last page",
                                "type": "string"
                            },
                            "prev": {
                                "description": "URL to previous page",
                                "type": "string"
                            },
                            "next": {
                                "description": "URL to next page",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "ValidationError": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": false
                    },
                    "message": {
                        "type": "string",
                        "example": "The given data was invalid."
                    },
                    "errors": {
                        "properties": {
                            "field_name": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "example": [
                                    "The field name is required."
                                ]
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "UnauthorizedError": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": false
                    },
                    "message": {
                        "type": "string",
                        "example": "Unauthorized access"
                    },
                    "errors": {
                        "type": "object",
                        "example": []
                    }
                },
                "type": "object"
            },
            "NotFoundError": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": false
                    },
                    "message": {
                        "type": "string",
                        "example": "Resource not found"
                    },
                    "errors": {
                        "type": "object",
                        "example": []
                    }
                },
                "type": "object"
            },
            "ServerError": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": false
                    },
                    "message": {
                        "type": "string",
                        "example": "Something went wrong"
                    },
                    "errors": {
                        "type": "object",
                        "example": []
                    }
                },
                "type": "object"
            },
            "ForbiddenError": {
                "title": "Forbidden Error",
                "description": "Error response when user lacks required permissions",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": false
                    },
                    "message": {
                        "type": "string",
                        "example": "Insufficient permissions to perform this action"
                    },
                    "data": {
                        "type": "object",
                        "example": null,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "RateLimitError": {
                "title": "Rate Limit Error",
                "description": "Error response when rate limit is exceeded",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": false
                    },
                    "message": {
                        "type": "string",
                        "example": "Too many requests. Please try again later."
                    },
                    "data": {
                        "type": "object",
                        "example": null,
                        "nullable": true
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "jwt": {
                "type": "apiKey",
                "description": "JWT Bearer token authentication. Format: Bearer {token}",
                "name": "Authorization",
                "in": "header"
            },
            "bearerAuth": {
                "type": "http",
                "description": "JWT Bearer token authentication for admin API. Format: Bearer {token}",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Authentication",
            "description": "User authentication and authorization endpoints"
        },
        {
            "name": "Tasks",
            "description": "Task management operations including CRUD operations, status updates, and soft deletes"
        },
        {
            "name": "Users",
            "description": "User management and profile operations"
        }
    ]
}