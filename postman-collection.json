{
  "info": {
    "name": "Advanced Task Management API",
    "description": "Comprehensive API collection for the Advanced Task Management System",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000/api/v1",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"password123\",\n  \"password_confirmation\": \"password123\",\n  \"phone\": \"+1234567890\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user account. Returns JWT token and user information."
          },
          "response": []
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data.token) {",
                  "        pm.environment.set('jwt_token', response.data.token);",
                  "        pm.collectionVariables.set('jwt_token', response.data.token);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Authenticate user and receive JWT token. Token is automatically saved to environment variables."
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/refresh-token",
              "host": ["{{base_url}}"],
              "path": ["auth", "refresh-token"]
            },
            "description": "Refresh JWT token to extend session."
          },
          "response": []
        },
        {
          "name": "Get Current User",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/me",
              "host": ["{{base_url}}"],
              "path": ["auth", "me"]
            },
            "description": "Get current authenticated user profile information."
          },
          "response": []
        }
      ],
      "description": "Authentication endpoints for user registration, login, and token management."
    },
    {
      "name": "Tasks",
      "item": [
        {
          "name": "Get All Tasks",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/tasks?page=1&per_page=15&status=0&priority=2",
              "host": ["{{base_url}}"],
              "path": ["tasks"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number"
                },
                {
                  "key": "per_page",
                  "value": "15",
                  "description": "Items per page"
                },
                {
                  "key": "status",
                  "value": "0",
                  "description": "Filter by status (0=Pending, 1=In Progress, 2=Completed, 3=Overdue)"
                },
                {
                  "key": "priority",
                  "value": "2",
                  "description": "Filter by priority (0=Low, 1=Medium, 2=High, 3=Critical)"
                }
              ]
            },
            "description": "Retrieve paginated list of tasks with optional filtering."
          },
          "response": []
        },
        {
          "name": "Create Task",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Complete project documentation\",\n  \"description\": \"Write comprehensive API documentation using Swagger\",\n  \"due_date\": \"2024-12-31\",\n  \"priority\": 2,\n  \"assignable_id\": 1\n}"
            },
            "url": {
              "raw": "{{base_url}}/tasks",
              "host": ["{{base_url}}"],
              "path": ["tasks"]
            },
            "description": "Create a new task. Rate limited to prevent spam."
          },
          "response": []
        },
        {
          "name": "Get Task",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/tasks/1",
              "host": ["{{base_url}}"],
              "path": ["tasks", "1"]
            },
            "description": "Get details of a specific task by ID."
          },
          "response": []
        },
        {
          "name": "Update Task",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated task title\",\n  \"description\": \"Updated task description\",\n  \"due_date\": \"2024-12-31\",\n  \"priority\": 1,\n  \"assignable_id\": 2\n}"
            },
            "url": {
              "raw": "{{base_url}}/tasks/1",
              "host": ["{{base_url}}"],
              "path": ["tasks", "1"]
            },
            "description": "Update an existing task with new details."
          },
          "response": []
        },
        {
          "name": "Update Task Status",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": 1\n}"
            },
            "url": {
              "raw": "{{base_url}}/tasks/1/status",
              "host": ["{{base_url}}"],
              "path": ["tasks", "1", "status"]
            },
            "description": "Update task status (0=Pending, 1=In Progress, 2=Completed, 3=Overdue)."
          },
          "response": []
        },
        {
          "name": "Delete Task (Soft Delete)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/tasks/1",
              "host": ["{{base_url}}"],
              "path": ["tasks", "1"]
            },
            "description": "Soft delete a task (moves to trash, can be restored)."
          },
          "response": []
        }
      ],
      "description": "Core task management operations including CRUD, status updates, and soft deletes."
    },
    {
      "name": "Trash Management",
      "item": [
        {
          "name": "Get Trashed Tasks",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/tasks/trashed",
              "host": ["{{base_url}}"],
              "path": ["tasks", "trashed"]
            },
            "description": "Get list of soft-deleted tasks that can be restored."
          },
          "response": []
        },
        {
          "name": "Restore Task",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/tasks/restore/1",
              "host": ["{{base_url}}"],
              "path": ["tasks", "restore", "1"]
            },
            "description": "Restore a soft-deleted task back to active status."
          },
          "response": []
        },
        {
          "name": "Force Delete Task",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/tasks/force-delete/1",
              "host": ["{{base_url}}"],
              "path": ["tasks", "force-delete", "1"]
            },
            "description": "Permanently delete a task from database. This action cannot be undone."
          },
          "response": []
        }
      ],
      "description": "Trash management operations for soft-deleted tasks."
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-set base URL if not set",
          "if (!pm.collectionVariables.get('base_url')) {",
          "    pm.collectionVariables.set('base_url', 'http://localhost:8000/api/v1');",
          "}"
        ]
      }
    }
  ]
}
